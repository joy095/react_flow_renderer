{"version":3,"sources":["react-flow-renderer/Nodes.jsx","react-flow-renderer/index.jsx","App.js","index.js"],"names":["nodeTypes","rectangle","_ref","data","React","createElement","style","background","padding","borderRadius","Handle","type","position","id","concat","label","circle","_ref2","backgroundColor","ReactFlowRenderer","_useState","useState","_useState2","_slicedToArray","toggle","setToggle","_useState3","_useState4","elements","setElements","_useState5","_useState6","name","setName","_useState7","_useState8","activeNode","setActiveNode","_useState9","_useState10","newName","setNewName","_useState11","_useState12","setInstance","useEffect","height","width","ReactFlow","onElementsRemove","elementTobeRemoved","prev","removeElements","onConnect","params","addEdge","deleteKeyCode","onEdgeUpdate","oldEdge","newConnection","els","updateEdge","snapToGrid","snapGrid","connectionLineStyle","stroke","strokeWidth","onDoubleClick","e","htmlString","target","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","onLoad","reactFlowInstance","fitView","onNodeMouseEnter","event","node","console","log","onNodeMouseLeave","Background","gap","size","color","Controls","display","top","left","zIndex","border","marginBottom","onClick","flexDirection","value","onChange","placeholder","newNode","Date","now","x","y","_objectSpread","_toConsumableArray","map","App","BrowserRouter","Navigate","to","replace","Routes","Route","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bf04728.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Handle } from \"react-flow-renderer\";\r\n\r\nconst RectangleNode = ({ data }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        background: \"#8a94fc\",\r\n        padding: \"14px\",\r\n        borderRadius: \"5px\",\r\n      }}\r\n    >\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"top\"\r\n        id={`${data.id}.top`}\r\n        style={{ borderRadius: 0 }}\r\n      />\r\n      <div id={data.id}>{data.label}</div>\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        id={`${data.id}.bottom`}\r\n        style={{ borderRadius: 0 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CircleNode = ({ data }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#8a94fc\",\r\n        padding: \"14px\",\r\n        borderRadius: \"50px\",\r\n      }}\r\n    >\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"top\"\r\n        id={`${data.id}.top`}\r\n        style={{ borderRadius: 0 }}\r\n      />\r\n      <div id={data.id}>{data.label}</div>\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        id={`${data.id}.bottom`}\r\n        style={{ borderRadius: 0 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const nodeTypes = {\r\n  rectangle: RectangleNode,\r\n  circle: CircleNode,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport ReactFlow, {\r\n  removeElements,\r\n  updateEdge,\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { nodeTypes } from \"./Nodes\";\r\n\r\nconst ReactFlowRenderer = () => {\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const [elements, setElements] = useState([]);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [activeNode, setActiveNode] = useState();\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [instance, setInstance] = useState();\r\n\r\n  useEffect(() => {\r\n    if (activeNode) setNewName(activeNode.data.label);\r\n  }, [activeNode]);\r\n\r\n  const elementRemoveHandler = (elementTobeRemoved) => {\r\n    setElements((prev) => removeElements(elementTobeRemoved, prev));\r\n  };\r\n\r\n  const connectHandler = (params) => {\r\n    setElements((prev) => addEdge(params, prev));\r\n  };\r\n\r\n  const addCircleHandler = () => {\r\n    const newNode = {\r\n      id: `${Date.now()}`,\r\n      data: { label: `${name}` },\r\n      type: \"circle\",\r\n      position: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n    };\r\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n    setElements((prev) => {\r\n      return [...prev, newNode];\r\n    });\r\n    setName(\"\");\r\n  };\r\n\r\n  const addRectangleHandler = () => {\r\n    const newNode = {\r\n      id: `${Date.now()}`,\r\n      data: { label: `${name}` },\r\n      type: \"rectangle\",\r\n      position: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n    };\r\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n    setElements((prev) => {\r\n      return [...prev, newNode];\r\n    });\r\n    setName(\"\");\r\n  };\r\n\r\n  const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n  const clickHandler = (e) => {\r\n    var htmlString = e.target.outerHTML.toString();\r\n    var index = htmlString.indexOf(` id=\"`);\r\n    index += 5;\r\n    const currentId = htmlString.substr(index, 13);\r\n\r\n    elements.forEach((_current) => {\r\n      if (_current.id === currentId) {\r\n        setActiveNode(_current);\r\n      }\r\n    });\r\n    // setNewName(activeNode.data.label)\r\n  };\r\n\r\n  const updateNodeHandler = () => {\r\n    if (!activeNode) return;\r\n    setElements(\r\n      elements.map((_current) => {\r\n        if (_current.id === activeNode.id) {\r\n          return {\r\n            ..._current,\r\n            data: { label: newName, id: _current.data.id },\r\n          };\r\n        }\r\n\r\n        return _current;\r\n      })\r\n    );\r\n  };\r\n\r\n  const deleteNodeHandler = () => {\r\n    if (!activeNode) return;\r\n    setElements(\r\n      elements.map((_current) => {\r\n        if (_current.id === activeNode.id) {\r\n          return {\r\n            ..._current,\r\n            data: { label: newName, id: _current.data.id },\r\n          };\r\n        }\r\n\r\n        return _current;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onLoad = (reactFlowInstance) => {\r\n    setInstance(reactFlowInstance);\r\n    reactFlowInstance.fitView();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n      }}\r\n    >\r\n      <ReactFlow\r\n        elements={elements}\r\n        onElementsRemove={elementRemoveHandler}\r\n        onConnect={connectHandler}\r\n        deleteKeyCode={\"Backspace\"}\r\n        onEdgeUpdate={edgeUpdateHandler}\r\n        nodeTypes={nodeTypes}\r\n        snapToGrid={true}\r\n        snapGrid={[16, 16]}\r\n        connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n        onDoubleClick={clickHandler}\r\n        onLoad={onLoad}\r\n        onNodeMouseEnter={(event, node) =>\r\n          console.log({ name: \"onNodeMouseEnter\", event, node })\r\n        }\r\n        onNodeMouseLeave={(event, node) =>\r\n          console.log({ name: \"onNodeMouseLeave\", event, node })\r\n        }\r\n      >\r\n        <Background gap={15} size={2} color=\"#f6f9fe\" />\r\n\r\n        <Controls />\r\n      </ReactFlow>\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"30px\",\r\n          zIndex: \"100\",\r\n        }}\r\n      >\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            style={{\r\n              background: \"#4a86e8\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              padding: \"10px\",\r\n              borderRadius: \"5px\",\r\n              marginBottom: \"5px\",\r\n              width: \"100%\",\r\n            }}\r\n            onClick={() => setToggle(!toggle)}\r\n          >\r\n            Create Node\r\n          </button>\r\n          {toggle && (\r\n            <div\r\n              style={{ display: \"flex\", flexDirection: \"column\", gap: \"5px\" }}\r\n            >\r\n              <input\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"Enter new node\"\r\n                style={{ padding: \"5px\" }}\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                style={{\r\n                  background: \"#4a86e8\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  padding: \"10px\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n                onClick={addRectangleHandler}\r\n              >\r\n                Create Rectangle\r\n              </button>\r\n\r\n              <button\r\n                type=\"button\"\r\n                style={{\r\n                  background: \"#4a86e8\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  padding: \"10px\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n                onClick={addCircleHandler}\r\n              >\r\n                Create Circle\r\n              </button>\r\n\r\n              <div>\r\n                <input\r\n                  value={newName}\r\n                  onChange={(e) => setNewName(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Update your node\"\r\n                  style={{ padding: \"5px\" }}\r\n                />\r\n              </div>\r\n              <button\r\n                type=\"button\"\r\n                style={{\r\n                  background: \"#4a86e8\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  padding: \"10px\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n                onClick={updateNodeHandler}\r\n              >\r\n                Update\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactFlowRenderer;\r\n","import React from \"react\";\r\nimport ReactFlowRenderer from \"./react-flow-renderer\";\r\nimport { BrowserRouter, Navigate, Route, Routes } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Navigate to=\"/home\" replace={true} />\r\n\r\n      <Routes>\r\n        <Route path=\"/home\" element={<ReactFlowRenderer />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}